#+TITLE: Python Minecraft toys

* Maze generator

First, import the library:

#+BEGIN_SRC python :exports none :results none :session readme
  from maze import *
#+END_SRC

Now you can generate a maze:

#+BEGIN_SRC python :session readme
  myMaze = Maze(5,6)
#+END_SRC

#+RESULTS:

This gives you a new random maze of width `5` and height `10`. To quickly view this
maze, you can use:

#+BEGIN_SRC python :session readme
  myMaze.drawBlocks(block='%')
#+END_SRC

#+RESULTS:
#+begin_example
%%%%%%%%%%%
%   % % % %
% %%% % % %
%       % %
% %%%%% % %
%     % % %
% %%%%% % %
%   % % % %
%%% % % % %
%   %   % %
% %%% %%% %
%   %     %
%%%%%%%%%%%
#+end_example

The top-left of the maze is at `GridLocation(0,0)`. As we move East (right), we
increase our x-coordinate. As we move South (down), we increase our y-coordinate.

This maze has been drawn using a "block representation", where walls are "fat". So
while we asked for a maze of width 5 and height 6, we actually drew it so that it is
`myMaze.blocksWidth == 11` characters across and `myMaze.blocksHeight == 13`
characters down. That way, we could represent the maze walls by the character `'%'`.

We can query whether or not there is a wall block at any location in this
representation using hasBlockAt:

#+BEGIN_SRC python :session readme
  myMaze.hasBlockAt(GridLocation(5,9))
#+END_SRC

#+RESULTS:
: False

Let's mark this empty location on the map with an `'X'`:

#+begin_example
%%%%%%%%%%%
%   % % % %
% %%% % % %
%       % %
% %%%%% % %
%     % % %
% %%%%% % %
%   % % % %
%%% % % % %
%   %X  % %
% %%% %%% %
%   %     %
%%%%%%%%%%%
#+end_example

We can verify that the block's around us are as depicted:

#+BEGIN_SRC python :session readme
  myMaze.hasBlockAt(GridLocation(4,8)) # Northwest
#+END_SRC

#+RESULTS:
: True

#+BEGIN_SRC python :session readme
  myMaze.hasBlockAt(GridLocation(5,8)) # North
#+END_SRC

#+RESULTS:
: False

#+BEGIN_SRC python :session readme
  myMaze.hasBlockAt(GridLocation(6,8)) # Northeast
#+END_SRC

-#+RESULTS:
: True

#+BEGIN_SRC python :session readme
  myMaze.hasBlockAt(GridLocation(4,9)) # West
#+END_SRC

#+RESULTS:
: True

#+BEGIN_SRC python :session readme
  myMaze.hasBlockAt(GridLocation(6,9)) # East
#+END_SRC

#+RESULTS:
: False

#+BEGIN_SRC python :session readme
  myMaze.hasBlockAt(GridLocation(4,9)) # Southwest
#+END_SRC

#+RESULTS:
: True

#+BEGIN_SRC python :session readme
  myMaze.hasBlockAt(GridLocation(5,10)) # South
#+END_SRC

#+RESULTS:
: False

#+BEGIN_SRC python :session readme
  myMaze.hasBlockAt(GridLocation(6,10)) # Southeast
#+END_SRC

#+RESULTS:
: True

Now there is also a "compact representation" where walls are "thin". Here, our
location X on our map can be found using the function blockToCompact:

#+BEGIN_SRC python :session readme
  blockToCompact(GridLocation(5,9))
#+END_SRC

#+RESULTS:
: GridLocation(x=2, y=4)

We can identify the walls at this location using waysFrom:

#+BEGIN_SRC python :session readme
  myMaze.waysFrom(GridLocation(2,4))
#+END_SRC

#+RESULTS:
| E | S | N |

Here, we are told we can move:

1) East to `GridLocation(3,4)`
2) South to `GridLocation(2,5)`
3) North to `GridLocation(2,3)`

but we cannot move West. This is because:

1) there is no East/West wall between locations `GridLocation(2,4)` and
`GridLocation(3,4)`
2) there is no North/South wall between locations `GridLocation(2,4)` and
`GridLocation(2,5)`
3) there is no North/South wall between locations `GridLocation(2,4)` and
`GridLocation(2,3)`
4) there is an East/West wall between locations `GridLocation(2,4)` and
`GridLocation(2,4)`.

So here, walls are "thin" and are inserted directly between locations, rather than
being placed as blocks at locations,

To convert a coordinate `GridLocation(x,y)` in the compact representation to the block
representation, use

#+BEGIN_SRC python :session readme
  compactToBlock(GridLocation(2,4))
#+END_SRC

#+RESULTS:
: GridLocation(x=5, y=9)

To convert back, use:

#+BEGIN_SRC python :session readme
  blockToCompact(GridLocation(5,9))
#+END_SRC

#+RESULTS:
: GridLocation(x=2, y=4)

Note that not all locations in the block representation are valid locations in the
compact representation. If you try to convert these, you'll get None.

#+BEGIN_SRC python :session readme
  blockToCompact(GridLocation(5,8))
#+END_SRC

#+RESULTS:

For creating a maze in Minecraft, use the block representation.
